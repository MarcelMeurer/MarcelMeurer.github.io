<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ITProCloud Blog</title>
    <description>This is my personal website, which I maintain to support the cloud community. ITProCloud.de is the label I use for tests and demonstrations. ITProCloud.de is not a company in the business sense.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 19 Dec 2020 19:01:05 +0100</pubDate>
    <lastBuildDate>Sat, 19 Dec 2020 19:01:05 +0100</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>WVD Admin - Custom Scripts to run administrative tasks</title>
        <description>&lt;h1 id=&quot;custom-scripts-with-wvdadmin&quot;&gt;Custom Scripts with WVDAdmin&lt;/h1&gt;
&lt;p&gt;From version 1.6.15,  &lt;a href=&quot;https://blog.itprocloud.de/Windows-Virtual-Desktop-Admin/&quot;&gt;WVDAdmin&lt;/a&gt; supports custom scripts to run administrative tasks simultaneously on different session hosts. And that is easy to use and to extend. Let me show it with the challenge to enable &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/virtual-desktop/shortpath#:~:text=RDP%20Shortpath%20is%20a%20feature,better%20reliability%20and%20consistent%20latency&quot;&gt;RDP Shortpath&lt;/a&gt; on existing session hosts.&lt;/p&gt;
&lt;p&gt;In this &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/virtual-desktop/shortpath#:~:text=RDP%20Shortpath%20is%20a%20feature,better%20reliability%20and%20consistent%20latency&quot;&gt;post&lt;/a&gt;, Microsoft describes how to enable this preview feature for WVD to connect to a WVD session without crossing the internet.&lt;/p&gt;
&lt;p&gt;Start copying the file [C:\Program Files\ITProCloud.de\WVDAdmin\CustomScript.ps1](C:\Program Files\ITProCloud.de\WVDAdmin\CustomScript.ps1) to a new name into the same directory. For example EnableRDPShortPath.ps1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/WVDAdmin/WVDAdmin-CustomScripts-ShortPath-01.png&quot; alt=&quot;documentation-001&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Open the file with notepad or  the editor of your choice. Edit the first line to give your script a name (that is visible in the drop-down list in WVDAdmin) and a description. The description is shown in the message box where you have to consent to run on the selected session hosts.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# {&amp;quot;Name&amp;quot;: &amp;quot;Enable RDP Shortpath&amp;quot;,&amp;quot;Description&amp;quot;:&amp;quot;This script enables the preview function for RDP Shortpath on the selected session hosts&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that, you can copy the code between lines 22 and 23 (LogWriter(“Custom script start”) and LogWriter(“Custom script end”)). I re-used the example code from Microsoft:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LogWriter(&amp;quot;Custom script start&amp;quot;)
$WinstationsKey = 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations'
New-ItemProperty -Path $WinstationsKey -Name 'fUseUdpPortRedirector' -ErrorAction:SilentlyContinue -PropertyType:dword -Value 1 -Force
New-ItemProperty -Path $WinstationsKey -Name 'UdpPortNumber' -ErrorAction:SilentlyContinue -PropertyType:dword -Value 3390 -Force

New-NetFirewallRule -DisplayName 'Remote Desktop - Shortpath (UDP-In)'  -Action Allow -Description 'Inbound rule for the Remote Desktop service to allow RDP traffic. [UDP 3390]' -Group '@FirewallAPI.dll,-28752' -Name 'RemoteDesktop-UserMode-In-Shortpath-UDP'  -PolicyStore PersistentStore -Profile Domain, Private -Service TermService -Protocol udp -LocalPort 3390 -Program '%SystemRoot%\system32\svchost.exe' -Enabled:True
LogWriter(&amp;quot;Custom script end&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The full script should look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# {&amp;quot;Name&amp;quot;: &amp;quot;Enable RDP Shortpath&amp;quot;,&amp;quot;Description&amp;quot;:&amp;quot;This script enables the preview function for RDP Shortpath on the selected session hosts&amp;quot;}
param(
    [string]$paramLogFileName=&amp;quot;WVD.Custom.log&amp;quot;,
	[string]$paramString=&amp;quot;&amp;quot;
);

# This powershell script is part of WVD Admin - see https://blog.itprocloud.de/Windows-Virtual-Desktop-Admin/ for more information
# Current Version of this script: 1.0 - Custom Script Extension
# Write a return string to WVDAdmin with the example in the last line

# Define logfilen and dir
$LogDir=&amp;quot;$env:windir\system32\logfiles&amp;quot;
$LogFile=&amp;quot;$LogDir\$paramLogFileName&amp;quot;

function LogWriter($message)
{
    $message=&amp;quot;$(Get-Date ([datetime]::UtcNow) -Format &amp;quot;o&amp;quot;) $message&amp;quot;
	write-host($message)
	if ([System.IO.Directory]::Exists($LogDir)) {write-output($message) | Out-File $LogFile -Append}
}

LogWriter(&amp;quot;Custom script start&amp;quot;)
$WinstationsKey = 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations'
New-ItemProperty -Path $WinstationsKey -Name 'fUseUdpPortRedirector' -ErrorAction:SilentlyContinue -PropertyType:dword -Value 1 -Force
New-ItemProperty -Path $WinstationsKey -Name 'UdpPortNumber' -ErrorAction:SilentlyContinue -PropertyType:dword -Value 3390 -Force

New-NetFirewallRule -DisplayName 'Remote Desktop - Shortpath (UDP-In)'  -Action Allow -Description 'Inbound rule for the Remote Desktop service to allow RDP traffic. [UDP 3390]' -Group '@FirewallAPI.dll,-28752' -Name 'RemoteDesktop-UserMode-In-Shortpath-UDP'  -PolicyStore PersistentStore -Profile Domain, Private -Service TermService -Protocol udp -LocalPort 3390 -Program '%SystemRoot%\system32\svchost.exe' -Enabled:True
LogWriter(&amp;quot;Custom script end&amp;quot;)

Write-host(&amp;quot;ScriptReturnMessage:{RDP Shortpath enabled - reboot the session hosts(s) to take effect}:ScriptReturnMessage&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you can load the script from &lt;a href=&quot;https://blog.itprocloud.de/assets/files/AutoUpdate/Scripts/EnableRDPShortPath.ps1&quot;&gt;here&lt;/a&gt; and copy it into WVDAdmin’s program file folder.&lt;/p&gt;
&lt;p&gt;To load the scripts, restart WVDAdmin. You will see multiple “Information Adding scripts for session host management in the log windows: xxxx.ps1” messages, including your new EnableRDPShortPath.ps.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/WVDAdmin/WVDAdmin-CustomScripts-ShortPath-02.png&quot; alt=&quot;documentation-001&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To run the script on multiple hosts, go to a host pool, expand the node and click the “Session hosts” container.  Select the hosts, select your script “Enable RDP Shortpath” and click on “Run script”. After clicking OK, the script will be run in the system context on the session hosts. This will take a few minutes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/WVDAdmin/WVDAdmin-CustomScripts-ShortPath-03.png&quot; alt=&quot;documentation-001&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/WVDAdmin/WVDAdmin-CustomScripts-ShortPath-04.png&quot; alt=&quot;documentation-001&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After that - and in this case, after the next reboot - RDP Shortpath should be available for WVD users in directly connected networks.&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Nov 2020 00:00:00 +0100</pubDate>
        <link>/Windows-Virtual-Desktop-Admin-CustomScripts/</link>
        <guid isPermaLink="true">/Windows-Virtual-Desktop-Admin-CustomScripts/</guid>
        
        
        <category>Windows Virtual Desktop</category>
        
      </item>
    
      <item>
        <title>INTERNAL Push Azure AD User properties into Azure Monitor Log Analytics to build Windows Virtual Desktop (WVD) performance data based on these</title>
        <description>&lt;p&gt;Azure Monitor / Log Analytics is my first choice to store log and usage data. Even for Windows Virtual Desktop (WVD), it is crucial to have an eye on the hosts, users, and single applications’ usage and performance.&lt;/p&gt;
&lt;p&gt;I do that using Azure Monitor for WVD (&lt;a href=&quot;https://www.sepago.de/en/azure-monitor-en/&quot;&gt;https://www.sepago.de/en/azure-monitor-en/&lt;/a&gt;) from sepago, which is also included in Nerdio Manager for WVD (&lt;a href=&quot;https://getnerdio.com/nerdio-manager-for-wvd/&quot;&gt;https://getnerdio.com/nerdio-manager-for-wvd/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The solution gives you insight into the performance of the apps and hosts and allows you to build a cost calculation on a per-user base. If you want to query and analyze data by other properties - like the department - you have to include these properties from Azure AD into your log analytics workspace.&lt;/p&gt;
&lt;p&gt;I found an easy solution doing that with an Azure logic app. The logic app access the Azure AD tenant and queries the users and some defined properties and send it to log analytics. A challenge was to handle the challenge that you have to query multiple times to get all users from Azure AD (a single query gives you only a specific amount of users -&amp;gt; Paging). I solved this using an “Until-loop” to get all users. The logic app pushed the users and their properties to the defined log analytics workspace. After this, the users and properties can be used in a KUSTO query. For example: To query the over-all session runtime by the department.&lt;/p&gt;
&lt;h2 id=&quot;installation-and-configuration&quot;&gt;Installation and configuration&lt;/h2&gt;
&lt;p&gt;Deploy the prepared logic app into your subscription using the “Deploy to Azure” button.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fblog.itprocloud.de%2Fassets%2Ffiles%2FAzureDeployments%2FLA-AADUsersToLogAnalytics-v2.json&quot;&gt;&lt;img src=&quot;https://aka.ms/deploytoazurebutton&quot; alt=&quot;Deploy to Azure&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To query the Azure AD unattended, you need a service principal (a function account) with the right permission. Create the service principal in the Azure Portal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Azure Active Directory -&amp;gt; App registrations -&amp;gt; New registration and give it a name (e.g. svc_AzureAdUserReader4AzureMonitor) and press register
&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-001.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Go to Certificates and secrets -&amp;gt; Add new client secret and type in a name (e.g. Key1) and expiration date (make a note into your calendar) and press add
&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-002.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Copy the generated secret for later use&lt;/li&gt;
&lt;li&gt;Go to Api permissions -&amp;gt; Add a permission -&amp;gt; select Microsoft Graph -&amp;gt; Application permissions -&amp;gt; select User.Read.All -&amp;gt; click Add permissions
&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-003.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Click Grant admin consent to allow this setting (you have to be in the right role to do that)
&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-004.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Go to overview and copy the application id and directory id for later use&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To upload the data to your Azure Monitor / log analytics workspace, you need the workspace id and key.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to your log analytics workspace -&amp;gt; select Advanced settings -&amp;gt; Agents management -&amp;gt; copy the workspace id and primary key for later use
&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-005.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go to your deployed logic app and click edit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Expand “Until 2”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on http. Enter the data from your service principal into the fields Tenant (Directory id), client id, and secret
&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-006.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on Connections and add a new one (Add new)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Give a name (e.g. ToLogAnalytics), the primary key and workspace id from log analytics and press create
&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-007.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Save the logic app and press run to test it.&lt;/p&gt;
&lt;p&gt;If everything looks good, our logic app will write the user data to log analytics once a day.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-008.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You can query the data from log analytics with “ITPC_CTX_ADUsers_CL”. Keep in mind that it takes a while (30 minutes) to build the first upload schema.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-009.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can modify the filter and the properties you get back, modifying the query URL. The URL can be modified in “Initialize variable” in the logic app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-010.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The default is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://graph.microsoft.com/v1.0/users?$filter=accountEnabled eq true  and userType eq 'Member'&amp;amp;$select=userPrincipalName,onPremisesSamAccountName,employeeId,officeLocation,department
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A list of valid properties is here: &lt;a href=&quot;https://docs.microsoft.com/de-de/graph/api/resources/user?view=graph-rest-1.0&quot;&gt;https://docs.microsoft.com/de-de/graph/api/resources/user?view=graph-rest-1.0&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2020 00:00:00 +0200</pubDate>
        <link>/Push-Azure-AD-User-data-into-Azure-Monitor-Log-Analytics-to-query-WVD-data-INTERNAL/</link>
        <guid isPermaLink="true">/Push-Azure-AD-User-data-into-Azure-Monitor-Log-Analytics-to-query-WVD-data-INTERNAL/</guid>
        
        
      </item>
    
      <item>
        <title>Push Azure AD User properties into Azure Monitor Log Analytics to build Windows Virtual Desktop (WVD) performance data based on these</title>
        <description>&lt;p&gt;Azure Monitor / Log Analytics is my first choice to store log and usage data. Even for Windows Virtual Desktop (WVD), it is crucial to have an eye on the hosts, users, and single applications’ usage and performance.&lt;/p&gt;
&lt;p&gt;I do that using Azure Monitor for WVD (&lt;a href=&quot;https://www.sepago.de/en/azure-monitor-en/&quot;&gt;https://www.sepago.de/en/azure-monitor-en/&lt;/a&gt;) from sepago, which is also included in Nerdio Manager for WVD (&lt;a href=&quot;https://getnerdio.com/nerdio-manager-for-wvd/&quot;&gt;https://getnerdio.com/nerdio-manager-for-wvd/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The solution gives you insight into the performance of the apps and hosts and allows you to build a cost calculation on a per-user base. If you want to query and analyze data by other properties - like the department - you have to include these properties from Azure AD into your log analytics workspace.&lt;/p&gt;
&lt;p&gt;I found an easy solution doing that with an Azure logic app. The logic app access the Azure AD tenant and queries the users and some defined properties and send it to log analytics. A challenge was to handle the challenge that you have to query multiple times to get all users from Azure AD (a single query gives you only a specific amount of users -&amp;gt; Paging). I solved this using an “Until-loop” to get all users. The logic app pushed the users and their properties to the defined log analytics workspace. After this, the users and properties can be used in a KUSTO query. For example: To query the over-all session runtime by the department.&lt;/p&gt;
&lt;h2 id=&quot;installation-and-configuration&quot;&gt;Installation and configuration&lt;/h2&gt;
&lt;p&gt;Deploy the prepared logic app into your subscription using the “Deploy to Azure” button.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fblog.itprocloud.de%2Fassets%2Ffiles%2FAzureDeployments%2FLA-AADUsersToLogAnalytics.json&quot;&gt;&lt;img src=&quot;https://aka.ms/deploytoazurebutton&quot; alt=&quot;Deploy to Azure&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To query the Azure AD unattended, you need a service principal (a function account) with the right permission. Create the service principal in the Azure Portal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Azure Active Directory -&amp;gt; App registrations -&amp;gt; New registration and give it a name (e.g. svc_AzureAdUserReader4AzureMonitor) and press register
&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-001.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Go to Certificates and secrets -&amp;gt; Add new client secret and type in a name (e.g. Key1) and expiration date (make a note into your calendar) and press add
&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-002.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Copy the generated secret for later use&lt;/li&gt;
&lt;li&gt;Go to Api permissions -&amp;gt; Add a permission -&amp;gt; select Microsoft Graph -&amp;gt; Application permissions -&amp;gt; select User.Read.All -&amp;gt; click Add permissions
&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-003.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Click Grant admin consent to allow this setting (you have to be in the right role to do that)
&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-004.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Go to overview and copy the application id and directory id for later use&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To upload the data to your Azure Monitor / log analytics workspace, you need the workspace id and key.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to your log analytics workspace -&amp;gt; select Advanced settings -&amp;gt; Agents management -&amp;gt; copy the workspace id and primary key for later use
&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-005.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go to your deployed logic app and click edit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Expand “Until 2”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on http. Enter the data from your service principal into the fields Tenant (Directory id), client id, and secret
&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-006.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on Connections and add a new one (Add new)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Give a name (e.g. ToLogAnalytics), the primary key and workspace id from log analytics and press create
&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-007.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Save the logic app and press run to test it.&lt;/p&gt;
&lt;p&gt;If everything looks good, our logic app will write the user data to log analytics once a day.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-008.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You can query the data from log analytics with “ITPC_CTX_ADUsers_CL”. Keep in mind that it takes a while (30 minutes) to build the first upload schema.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-009.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can modify the filter and the properties you get back, modifying the query URL. The URL can be modified in “Initialize variable” in the logic app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/LogicApp-AAD-AzureMonitor-010.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The default is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://graph.microsoft.com/v1.0/users?$filter=accountEnabled eq true  and userType eq 'Member'&amp;amp;$select=userPrincipalName,onPremisesSamAccountName,employeeId,officeLocation,department
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A list of valid properties is here: &lt;a href=&quot;https://docs.microsoft.com/de-de/graph/api/resources/user?view=graph-rest-1.0&quot;&gt;https://docs.microsoft.com/de-de/graph/api/resources/user?view=graph-rest-1.0&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Oct 2020 00:00:00 +0200</pubDate>
        <link>/Push-Azure-AD-User-data-into-Azure-Monitor-Log-Analytics-to-query-WVD-data/</link>
        <guid isPermaLink="true">/Push-Azure-AD-User-data-into-Azure-Monitor-Log-Analytics-to-query-WVD-data/</guid>
        
        
        <category>Windows Virtual Desktop</category>
        
        <category>Azure Monitor</category>
        
      </item>
    
      <item>
        <title>Least privileges with custom roles for Windows Virtual Desktop (WVD)</title>
        <description>&lt;p&gt;Administration, deployment, user support of Windows Virtual Desktop (WVD) needs permission in Azure. But these permissions are depending on the task a group of users/administrators have to do. For example, if the help desk has to log off and send messages to users, they need fewer permissions than the administrator building session hosts.&lt;/p&gt;
&lt;p&gt;In the first step, the permission for the different groups can be given using the build-in roles in Azure and assigning them to the groups and specific resources. But this doesn’t allow us to assign granular permissions to fulfill the least privileges approach. To do that, we have to go with custom roles. Custom roles allow combining specific permission for different resource types to a new role. Luckily, Windows Virtual Desktop has many additional permissions per resource type (host pool, app group, workspace, etc.).&lt;/p&gt;
&lt;p&gt;I combined the permission from WVD and from other resource types (like Microsoft Compute) to build eight roles I often use in projects to assign the least permission as needed for the different administrator. These roles can be used to assign them to users, groups, and even service principals (important for &lt;a href=&quot;https://blog.itprocloud.de/Windows-Virtual-Desktop-Admin/&quot;&gt;WVDAdmin&lt;/a&gt;). In my opinion, the best way is to assign these roles on a resource group level and not to a subscription level.&lt;/p&gt;
&lt;p&gt;Before I describe the different new roles, I have to mention one “Specialty”: Assigning users to an app group in Windows Virtual Desktop needs that you have “Owner Permission” (or more precisely: &lt;em&gt;Microsoft.Authorization/roleAssignments/write&lt;/em&gt;) to the app group. While Azure doesn’t have the ability to assign owner permission in a role to a specific resource type, I didn’t add this permission to the roles. So, you can easily use the new roles on a resource group level, and you can be sure that the user only has the least permission, but you have to assign appropriate admins as an owner to (only) the app groups. Owner permission on resource groups causes that the user can do and rollout anything in these groups.&lt;/p&gt;
&lt;p&gt;Note: In a real-world scenario where the least privileges approach for a specific group of admins is not necessary, owner permissions are given to the resource groups containing the WVD resources (especially the app groups).&lt;/p&gt;
&lt;h2 id=&quot;my-common-wvd-roles&quot;&gt;My common WVD roles:&lt;/h2&gt;
&lt;h3 id=&quot;wvd---user-session-reader&quot;&gt;WVD - User Session Reader&lt;/h3&gt;
&lt;p&gt;Allows to read the user session and host pool properties of Windows Virtual Desktop.&lt;/p&gt;
&lt;h3 id=&quot;wvd---user-session-contributor&quot;&gt;WVD - User Session Contributor&lt;/h3&gt;
&lt;p&gt;Allows to work with the user session and read host pool properties of Windows Virtual Desktop host pools, including to send messages to users and logoff/disconnect user sessions&lt;/p&gt;
&lt;h3 id=&quot;wvd---infrastructure-reader&quot;&gt;WVD - Infrastructure Reader&lt;/h3&gt;
&lt;p&gt;Allows to read all properties of a WVD infrastructure: Host pools, session hosts, workspaces, app groups, and user sessions.&lt;/p&gt;
&lt;h3 id=&quot;wvd---infrastructure-contributor&quot;&gt;WVD - Infrastructure Contributor&lt;/h3&gt;
&lt;p&gt;Allows to read and write all properties of a WVD infrastructure but doesn’t allow to delete resources: Host pools, session hosts, workspaces, app groups, and user sessions.&lt;/p&gt;
&lt;h3 id=&quot;wvd---infrastructure-administrator&quot;&gt;WVD - Infrastructure Administrator&lt;/h3&gt;
&lt;p&gt;Allows to read and write all properties of a WVD infrastructure and allows to delete resources: Host pools, session hosts, workspaces, app groups, and user sessions.&lt;/p&gt;
&lt;h3 id=&quot;wvd---infrastructure-administrator-amp-vm-manager&quot;&gt;WVD - Infrastructure Administrator &amp;amp; VM Manager&lt;/h3&gt;
&lt;p&gt;Allows to read and write all properties of a WVD infrastructure and allows to delete resources: Host pools, session hosts, workspaces, app groups, and user sessions. Additionally, the power state of all hosts and VMs can be changed.&lt;/p&gt;
&lt;h3 id=&quot;wvd---template-and-session-host-administrator&quot;&gt;WVD - Template and Session Host Administrator&lt;/h3&gt;
&lt;p&gt;Allows to create/modify/delete Virtual Machines, images, rollout new session hosts into host pools, and attach them to a vnet.&lt;/p&gt;
&lt;h3 id=&quot;wvd---full-administrator&quot;&gt;WVD - Full Administrator&lt;/h3&gt;
&lt;p&gt;Allows to create/modify/delete Virtual Machines, images, rollout new session hosts into host pools, attach them to a vnet, and all permissions from the role ‘WVD - Infrastructure Administrator &amp;amp; VM Manager’.&lt;/p&gt;
&lt;p&gt;I’m happy about feedback and give me a ping if you want to have the ‘&lt;em&gt;Microsoft.Authorization/roleAssignments/write&lt;/em&gt;’ inside the contributor roles (but that doesn’t prevent users from getting higher permissions on the resource group).&lt;/p&gt;
&lt;p&gt;Feel free to roll out these WVD roles into your own subscription (ignore the location, the roles are available in the subscription independent from the location - or take a look into the deployment &lt;a href=&quot;https://blog.itprocloud.de/assets/files/AzureDeployments/WVD-Custom-Roles-01.json&quot;&gt;script&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fblog.itprocloud.de%2Fassets%2Ffiles%2FAzureDeployments%2FWVD-Custom-Roles-01.json&quot;&gt;&lt;img src=&quot;https://aka.ms/deploytoazurebutton&quot; alt=&quot;Deploy to Azure&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0200</pubDate>
        <link>/Least-privileges-with-custom-roles-for-Windows-Virtual-Desktop-(WVD)/</link>
        <guid isPermaLink="true">/Least-privileges-with-custom-roles-for-Windows-Virtual-Desktop-(WVD)/</guid>
        
        
        <category>Windows Virtual Desktop</category>
        
      </item>
    
      <item>
        <title>Shadow a WVD user with least privileges</title>
        <description>&lt;p&gt;WVD allows local administrators to shadow user sessions. You can do this  easily with &lt;a href=&quot;https://blog.itprocloud.de/Windows-Virtual-Desktop-Admin/&quot;&gt;WVDAdmin&lt;/a&gt; or using the command-line like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;&gt;mstsc /v:WVD-DESIGN-404 /control /shadow:2 /prompt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In most companies, a help desk agent supports users using applications. For that, local admin privileges are not necessary and not recommended. To allow help desk agents shadowing users in WVD, you have to give these users (or better: a user group) only the needed permission. To do this, execute the following command in an administrative cmd:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wmic /namespace:\\root\CIMV2\TerminalServices PATH Win32_TSPermissionsSetting WHERE (TerminalName like 'RDP-sxs%') CALL AddAccount 'ITPROCLOUD\ADM_WVD-Shadowing',2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives the users of the group &lt;strong&gt;ITPROCLOUD\ADM_WVD-Shadowing&lt;/strong&gt; the needed permission directly on the RDP-SXS stack (you need to reboot the session host).
I would run this command on the template VM / golden Image to have this permission configured for each session host. Alternatively, you can run this in a computer-logon script for existing session hosts.&lt;/p&gt;
&lt;p&gt;Hint: You can reset this setting with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wmic /namespace:\\root\CIMV2\TerminalServices PATH Win32_TSPermissionsSetting WHERE (TerminalName like 'RDP-sxs%') CALL RestoreDefaults
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take a look how shadowing a user session with &lt;a href=&quot;https://blog.itprocloud.de/Windows-Virtual-Desktop-Admin/&quot;&gt;WVDAdmin&lt;/a&gt; looks like: &lt;a href=&quot;https://twitter.com/i/status/1229472041423732736&quot;&gt;https://twitter.com/i/status/1229472041423732736&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Aug 2020 00:00:00 +0200</pubDate>
        <link>/Shadow-a-WVD-user-with-least-privileges/</link>
        <guid isPermaLink="true">/Shadow-a-WVD-user-with-least-privileges/</guid>
        
        
        <category>Windows Virtual Desktop</category>
        
      </item>
    
      <item>
        <title>What's wrong with Windows 10 and UWP and Sysprep?</title>
        <description>&lt;p&gt;I’m working in the WVD area and often create golden images to deploy session hosts for WVD - mainly based on Windows 10 Enterprise multi-session.
To do that, I create a template VM in Azure based on Windows 10, joined it to the domain, install updates and applications, and create an image based on that VM. To make my life easier, I use WVDAdmin to generate the template and rolling it out later - but this is independent of the issue with Sysprep.
One step of creating an image is to Sysprep the template image. I - or WVDAdmin is doing that - by running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sysprep.exe /generalize /oobe /shutdown /mode:vm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sometimes I run into an issue, and Sysprep stops work with an error message:
&lt;img src=&quot;../assets/images/Sysprep-01.png&quot; alt=&quot;Sysprep&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Digging into the log file show the issue:
&lt;img src=&quot;../assets/images/Sysprep-02.png&quot; alt=&quot;Sysprep&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Error: Package XXXXXXX was installed for a user, but not provisioned for all users.&lt;/p&gt;
&lt;p&gt;The package various. Sometimes I got a part of a language pack or other internal app packages. To run into the problem with certainty, install an app from the Windows Store.&lt;/p&gt;
&lt;p&gt;Let’s find out what happens, for doing that I installed different applications from the Windows Store into the VM and tried to Sysprep the VM. The first package blocking Sysprep was in this test “5319275A.WhatsAppDesktop_2.2027.10.0_x64__cv1g1gvanyjgm”&lt;/p&gt;
&lt;p&gt;To get details of the package run the following PowerShell script with administrative privileges:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get-AppxPackage -AllUsers | ? {$_.packagefullname.contains('5319275A.WhatsAppDesktop_2.2027.10.0_x64__cv1g1gvanyjgm')}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The returned object shows that this package is only installed for the local administrator (installing the apps from the Windows Store). The user querying this data (mm-admin) doesn’t have this package installed.
&lt;img src=&quot;../assets/images/Sysprep-03.png&quot; alt=&quot;Sysprep&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Okay. Appx packages from the store are personnel and not shared with all users on a VM (to install appx packages for all users, you have to sideload the packages with DISM.exe). So I tried to remove this app from all users:_&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get-AppxPackage -AllUsers | ? {$_.packagefullname.contains('5319275A.WhatsAppDesktop_2.2027.10.0_x64__cv1g1gvanyjgm')} | Remove-AppxPackage -AllUsers
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok. Sysprep again. The next issue occurs: Sysprep has the same problem with NetFlix - installed only for one user of the VM. Instead of removing the packages by trial and error, I found another way: Teach Sysprep to ignore this behavior. I guess it’s not a problem having an appx package assigned to only one user - even if it and administrative user.&lt;/p&gt;
&lt;p&gt;I figured out that Sysprep uses an XML file with a set of rules preparing a VM. The rule-set for generalizing an image is stored in &lt;code&gt;&amp;quot;C:\windows\System32\sysprep\ActionFiles\Generalize.xml&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To ignore the installed or update AppX package remove the following lines and save Generalize.xml (you have to take ownership of the file and give yourself permission to do that):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;sysprepOrder order=&amp;quot;0x1A00&amp;quot;&amp;gt;&amp;lt;/sysprepOrder&amp;gt;
&amp;lt;sysprepValidate methodName=&amp;quot;SysprepGeneralizeValidate&amp;quot; moduleName=&amp;quot;$(runtime.system32)\AppxSysprep.dll&amp;quot;&amp;gt;&amp;lt;/sysprepValidate&amp;gt;
&amp;lt;sysprepModule methodName=&amp;quot;SysprepGeneralize&amp;quot; moduleName=&amp;quot;$(runtime.system32)\AppxSysprep.dll&amp;quot;&amp;gt;&amp;lt;/sysprepModule&amp;gt;&amp;lt;/imaging&amp;gt;&amp;lt;imaging exclude=&amp;quot;&amp;quot;&amp;gt;&amp;lt;assemblyIdentity name=&amp;quot;Microsoft-Windows-SecureBoot-FirmwareUpdate&amp;quot; version=&amp;quot;10.0.19041.1&amp;quot; publicKeyToken=&amp;quot;31bf3856ad364e35&amp;quot; processorArchitecture=&amp;quot;amd64&amp;quot; versionScope=&amp;quot;NonSxS&amp;quot;&amp;gt;&amp;lt;/assemblyIdentity&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/Sysprep-04.png&quot; alt=&quot;Sysprep&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After that Sysprep runs without an issue. Rolling out a session host based on the new image works, and even the user could logon without a problem (and yes: they don’t have the Store apps from the local admin - as expected).&lt;/p&gt;
&lt;p&gt;Maybe there are some smarter ways to handle UWP and Sysprep (if you know one - let me know it, too). But this solves an issue creating or updating an image for WVD based on a template VM (golden image approach).&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jul 2020 00:00:00 +0200</pubDate>
        <link>/Sysprep-and-WVD-and-UWP/</link>
        <guid isPermaLink="true">/Sysprep-and-WVD-and-UWP/</guid>
        
        
        <category>Windows Virtual Desktop</category>
        
      </item>
    
      <item>
        <title>PolarConf 2019 - Building own solutions whit Azure Monitor </title>
        <description>&lt;p&gt;[Azure Global Bootcamp - WVD - How to enjoy perfect published apps and desktops.pdf](../assets/files/WVD - How to enjoy perfect published apps and desktops.pdf)&lt;/p&gt;
</description>
        <pubDate>Mon, 25 May 2020 00:00:00 +0200</pubDate>
        <link>/Azure-Global-Bootcamp-2020/</link>
        <guid isPermaLink="true">/Azure-Global-Bootcamp-2020/</guid>
        
        
      </item>
    
      <item>
        <title>Windows Virtual Desktop - Monitoring the Spring Backend - WVD</title>
        <description>&lt;p&gt;The long await update from WVD is public. It comes with a full ARM integration and is natively useable in the Azure Portal. Some things changed from the Fall to Spring update, and that’s include monitoring.&lt;/p&gt;
&lt;p&gt;In this post, I’m focused on monitoring the WVD backend and not monitoring the sessions, applications, session host performance, latency, etc. To exactly monitoring these metrics, check out the solution &lt;a href=&quot;https://www.sepago.de/en/azure-monitor-en/&quot;&gt;“Azure Monitor for WVD”&lt;/a&gt; which works for Fall and the Spring update - and the new version comes with great Azure workbooks to additionally visualize data by host pool.&lt;/p&gt;
&lt;p&gt;The Fall update writes logs to Azure Monitor / Log Analytics as custom logs. There is a &lt;a href=&quot;https://techcommunity.microsoft.com/t5/azure-sentinel/monitoring-windows-virtual-desktop-environments-fall-2019/ba-p/1356632&quot;&gt;really good blog post&lt;/a&gt; about this.&lt;/p&gt;
&lt;p&gt;The Spring update writes logs to Log Analytics as well, but they have a different name and schema. To enable logging the backend, you have to enable the diagnostic settings on all involved resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Workspace&lt;/li&gt;
&lt;li&gt;Host Pool&lt;/li&gt;
&lt;li&gt;App Group&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Make sure that you select all logs and select your Log Analytics workspace (if you use sepago’s “Azure Monitor for WVD” use the same Log Analytics workspace for the backend logging)&lt;/p&gt;
&lt;p&gt;![Registry with values](../assets/images/Azure Monitor for WVD/Blog-01-05.png)&lt;/p&gt;
&lt;p&gt;If you have done this for all resources, the WVD send logs to the selected workspace. Keep in mind that writing the first entries can take up to 20 minutes to build the data schema initially.&lt;/p&gt;
&lt;p&gt;After a while, you should have log data in your Log Analytics workspace:&lt;/p&gt;
&lt;p&gt;![Registry with values](../assets/images/Azure Monitor for WVD/Blog-01-06.png)&lt;/p&gt;
&lt;p&gt;You can see the following logs (tables):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WVDCheckpoints
&lt;ul&gt;
&lt;li&gt;Intermediate steps while establishing and running a connection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WVDConnections
&lt;ul&gt;
&lt;li&gt;Start/End of connections&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WVDErrors
&lt;ul&gt;
&lt;li&gt;Errors while establishing a connection, failures during the administration, failures getting feed informations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WVDHostRegistrations
&lt;ul&gt;
&lt;li&gt;About session host registration to host pools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WVDManagement
&lt;ul&gt;
&lt;li&gt;Administration log&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The logs are internally connectable with their correlation id you have in each log.&lt;/p&gt;
&lt;h2 id=&quot;lets-start-digging-some-data&quot;&gt;Let’s start digging some data&lt;/h2&gt;
&lt;p&gt;Open Log Analytics an go to “Logs” and run your queries based on the KUSTO query language.&lt;/p&gt;
&lt;h3 id=&quot;count-of-brokered-sessions-by-state&quot;&gt;Count of brokered sessions by state&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;WVDConnections 
| where State =~ &amp;quot;Started&amp;quot; and Type =~&amp;quot;WVDConnections&amp;quot; 
| extend CState=iff(SessionHostOSVersion==&amp;quot;&amp;lt;&amp;gt;&amp;quot;,&amp;quot;Failure&amp;quot;,&amp;quot;Success&amp;quot;) | summarize Count=count() by State=CState
| render piechart 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;![Registry with values](../assets/images/Azure Monitor for WVD/Blog-01-02.png)&lt;/p&gt;
&lt;h3 id=&quot;failed-connections&quot;&gt;Failed connections&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;WVDConnections 
| where State =~ &amp;quot;Started&amp;quot; and Type =~&amp;quot;WVDConnections&amp;quot; 
| extend Multi=split(_ResourceId, &amp;quot;/&amp;quot;) | extend CState=iff(SessionHostOSVersion==&amp;quot;&amp;lt;&amp;gt;&amp;quot;,&amp;quot;Failure&amp;quot;,&amp;quot;Success&amp;quot;)
| where CState=~&amp;quot;Failure&amp;quot; 
| project TimeStamp=TimeGenerated, UserName, ResourceGroup=Multi[4], HostPool=Multi[8],ResourceAlias, SessionHost=SessionHostName, ClientOS=ClientOS, ClientWvdVersion=ClientVersion, CorrelationId
| order by TimeStamp desc
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;failed-connection-with-details&quot;&gt;Failed connection with details&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;WVDConnections | where State =~ &amp;quot;Started&amp;quot; and Type =~&amp;quot;WVDConnections&amp;quot; 
| extend Multi=split(_ResourceId, &amp;quot;/&amp;quot;) | extend CState=iff(SessionHostOSVersion==&amp;quot;&amp;lt;&amp;gt;&amp;quot;,&amp;quot;Failure&amp;quot;,&amp;quot;Success&amp;quot;)
| where CState =~&amp;quot;Failure&amp;quot;
| order by TimeGenerated desc
| where State =~ &amp;quot;Started&amp;quot; | extend Multi=split(_ResourceId, &amp;quot;/&amp;quot;) 
| project ResourceAlias, ResourceGroup=Multi[4], HostPool=Multi[8], SessionHostName ,UserName ,CState=iff(SessionHostOSVersion==&amp;quot;&amp;lt;&amp;gt;&amp;quot;,&amp;quot;Failure&amp;quot;,&amp;quot;Success&amp;quot;), CorrelationId, TimeGenerated
| join kind= leftouter (
    WVDErrors 
) on CorrelationId
| extend DurationFromLogon=datetime_diff(&amp;quot;Second&amp;quot;,TimeGenerated1,TimeGenerated)
| project  TimeStamp=TimeGenerated, DurationFromLogon, UserName, ResourceAlias ,SessionHost=SessionHostName ,Source ,CodeSymbolic , ErrorMessage=Message, ErrorCode=Code, ErrorSource=Source ,ServiceError, CorrelationId
| order by TimeStamp desc
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;session-logon-duration-by-host-pool&quot;&gt;Session logon duration by host pool&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;WVDConnections 
| where Type =~&amp;quot;WVDConnections&amp;quot; and State =~ &amp;quot;Started&amp;quot; | extend Multi=split(_ResourceId, &amp;quot;/&amp;quot;) | project ResourceAlias, HostPool=toupper(HP=Multi[8]), SessionHostName , UserName ,CState=iff(SessionHostOSVersion==&amp;quot;&amp;lt;&amp;gt;&amp;quot;,&amp;quot;Failure&amp;quot;,&amp;quot;Success&amp;quot;), CorrelationId, TimeGenerated, ResourceGroup=Multi[4], DesktopGroup_s=toupper(strcat(RG=Multi[4],&amp;quot;.&amp;quot;, HP=Multi[8])) 
| join kind= leftouter (
    WVDCheckpoints 
) on CorrelationId
| extend DurationFromLogon=datetime_diff(&amp;quot;Second&amp;quot;,TimeGenerated1,TimeGenerated)
| where Name=~&amp;quot;RdpStackLogon&amp;quot; 
| project UserName, ResourceGroup, DesktopGroup_s,SessionHost=SessionHostName, TimeStamp=TimeGenerated1, DurationFromLogon
| summarize DurationInSeconds=avg(DurationFromLogon) by HostPool=DesktopGroup_s 
| render columnchart kind=unstacked 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;![Registry with values](../assets/images/Azure Monitor for WVD/Blog-01-01.png)&lt;/p&gt;
&lt;h3 id=&quot;session-logon-duration-by-user-desc&quot;&gt;Session logon duration by user (desc)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-kusto&quot;&gt;&gt;WVDConnections 
| where Type =~&amp;quot;WVDConnections&amp;quot; and State =~ &amp;quot;Started&amp;quot; | extend Multi=split(_ResourceId, &amp;quot;/&amp;quot;) | project ResourceAlias, HostPool=toupper(HP=Multi[8]), SessionHostName , UserName ,CState=iff(SessionHostOSVersion==&amp;quot;&amp;lt;&amp;gt;&amp;quot;,&amp;quot;Failure&amp;quot;,&amp;quot;Success&amp;quot;), CorrelationId, TimeGenerated, ResourceGroup=Multi[4], DesktopGroup_s=toupper(strcat(RG=Multi[4],&amp;quot;.&amp;quot;, HP=Multi[8])) 
| join kind= leftouter (
    WVDCheckpoints 
) on CorrelationId
| extend DurationFromLogon=datetime_diff(&amp;quot;Second&amp;quot;,TimeGenerated1,TimeGenerated)
| where Name=~&amp;quot;RdpStackLogon&amp;quot; 
| project UserName, ResourceGroup, DesktopGroup_s,SessionHost=SessionHostName, TimeStamp=TimeGenerated1, DurationFromLogon
| summarize DurationInSeconds=avg(DurationFromLogon) by HostPool=UserName
| order by DurationInSeconds desc 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;administrative-activities-over-time&quot;&gt;Administrative activities over time&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;WVDManagement 
| summarize Count=count() by bin(TimeGenerated,15)
| render scatterchart 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;![Registry with values](../assets/images/Azure Monitor for WVD/Blog-01-03.png)&lt;/p&gt;
&lt;p&gt;Good to know: Sepago’s commercial “Azure Monitor for WVD”  brings the ready to use Azure workbooks for the session and app monitoring and workbooks for the WVD backend:&lt;/p&gt;
&lt;p&gt;![Registry with values](../assets/images/Azure Monitor for WVD/Blog-01-07.png)&lt;/p&gt;
</description>
        <pubDate>Tue, 05 May 2020 00:00:00 +0200</pubDate>
        <link>/Windows-Virtual-Desktop-Monitoring-the-Spring-backend/</link>
        <guid isPermaLink="true">/Windows-Virtual-Desktop-Monitoring-the-Spring-backend/</guid>
        
        
        <category>Windows Virtual Desktop</category>
        
        <category>Azure Monitor</category>
        
      </item>
    
      <item>
        <title>Migrate Windows Virtual Desktop Host Pools from Fall to Spring Release - WVD</title>
        <description>&lt;p&gt;The long await update from WVD is public. It comes with a full ARM integration and is natively useable in the Azure Portal. The change from Fall to Spring (the name of both releases) cames without a build-in migration solution right now. You can rebuild your host pools and app groups and manually join your existing session hosts into the new once.&lt;/p&gt;
&lt;p&gt;With WVDAdmin I added two features to do that directly from the GUI:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Migrate a host pool to the Spring update: Creates a new host pool with the same properties as an existing host pool in the Fall update&lt;/li&gt;
&lt;li&gt;Move session hosts to another host pool*: Works in each direction and from host pool to host poll in the same version (you can use this additionally to remove an assigned user from a session host).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: If you are using WVDAdmin V1.5.5 or lower (v1.5.6 and higher downloads the files from Microsoft if internet access is not blogged): You can only move session hosts from host pool to host pool if you built the session host with WVDAdmin. If not, and you want to use this function with your other deployed session create a folder “ITPC-WVD-PostCustomizing” in C:\ and copy the RDAgent files into this folder and rename the files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RWrmXv&quot;&gt;Microsoft.RDInfra.RDAgent.msi&lt;/a&gt; (rename the file)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RWrxrH&quot;&gt;Microsoft.RDInfra.RDAgentBootLoader.msi&lt;/a&gt; (rename the file)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Make sure that you rename the files to fit the list above (without version numbers).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/WVDAdmin/Migrate-02.png&quot; alt=&quot;AADBrowser&quot; /&gt;&lt;/p&gt;
&lt;p&gt;But first: If you are new to WVD Spring update and have never used it before in your subscription, you have to register the service provider Microsoft.DesktopVirtualization (one-time process). You must be the owner of this subscription to do this. Go to your subscription -&amp;gt; Resource providers -&amp;gt; search for “Microsoft.DesktopVirtualization” and click register:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/WVDAdmin/ResourceProvider.png&quot; alt=&quot;AADBrowser&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-migration-process&quot;&gt;The migration process&lt;/h2&gt;
&lt;p&gt;The easiest way to migrate a Host Pool from Fall to Spring is by using WVDAdmin. If you have not WVDAdmin before, check out this &lt;a href=&quot;https://blog.itprocloud.de/Windows-Virtual-Desktop-Admin&quot;&gt;post&lt;/a&gt; .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Right-click your existing host pool and click: Migrate Host Pool settings to WVD Spring Update&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Select a target subscription and resource group (note: be sure not to mix different host pools in one resource group with app groups having the same name. If you do this, you will see that the migration process cannot migrate this app groups)&lt;/li&gt;
&lt;li&gt;Select a region: The region saved the meta-data and is independent of the region of your session hosts. There are only limited regions today&lt;/li&gt;
&lt;li&gt;Enter a name for your new Spring host pool&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logoff all users&lt;/li&gt;
&lt;li&gt;Right-click a session host and click “Change host pool” (read my note above, if this host was not created with WVDAdmin)&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Select the target host pool. Spring update host pools are tagged with a ²&lt;/li&gt;
&lt;li&gt;Check “Keep user assignment” if you migrate aa assigned session hosts and want to keep the assignment. If you uncheck this, the user assignment will be repealed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repeat the step “Right-click your existing host pool and click: Migrate Host Pool settings to WVD Spring Update” to re-create the icons for your applications. This can only be done if one session host is online&lt;/li&gt;
&lt;li&gt;Give the right user groups permission to the app groups: Click the app group(s) and click the button “Users and groups assignments” and start typing the name of the group(s). Note: I don’t migrate the user permission from the fall update believing that you won’t to add groups instead of single users&lt;/li&gt;
&lt;li&gt;Create a Workspace&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Create a Workspace right-clicking the workspace note. Create a workspace in the same region as your new host pool&lt;/li&gt;
&lt;li&gt;Right-click the workspace and add/link the app groups you have created&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Move more session hosts to the new host pool&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Right-click the session host note and select “Change host pool”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;After that, you should see your resources in the native RD client and in the HTML web site which has a new URL: &lt;a href=&quot;https://rdweb.wvd.microsoft.com/arm/webclient&quot;&gt;https://rdweb.wvd.microsoft.com/arm/webclient&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;debuggingnotes&quot;&gt;Debugging/notes:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you are using WVDAdmin V1.5.5 or lower (v1.5.6 and higher downloads the files from Microsoft if internet access is not blogged): Moving session host works with host created with WVDAdmin or if you create a folder “ITPC-WVD-PostCustomizing”. Copy the files into it:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RWrmXv&quot;&gt;Microsoft.RDInfra.RDAgent.msi&lt;/a&gt; (rename the file)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RWrxrH&quot;&gt;Microsoft.RDInfra.RDAgentBootLoader.msi&lt;/a&gt; (rename the file)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/WVDAdmin/Migrate-02.png&quot; alt=&quot;AADBrowser&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You cannot have app groups with from different host pools with the same name in one resource group&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Register Microsoft.DesktopVirtualization service provider
&lt;img src=&quot;../assets/images/WVDAdmin/ResourceProvider.png&quot; alt=&quot;AADBrowser&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The service principal of WVDAdmin needs owner permission to the resource groups containing the app groups to add/remove users&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The HTML5 client has a new URL: &lt;a href=&quot;https://rdweb.wvd.microsoft.com/arm/webclient&quot;&gt;https://rdweb.wvd.microsoft.com/arm/webclient&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you “lost” a session host you can add them manually to a host pool by doing:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Login to the VM&lt;/li&gt;
&lt;li&gt;Uninstall the RD agent and bootloader&lt;/li&gt;
&lt;li&gt;Install the bootloader&lt;/li&gt;
&lt;li&gt;install the agent and copy the registration key for the target host pool into the installation screen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I record a short video showing the migration process:&lt;/p&gt;
&lt;iframe width=&quot;800&quot; height=&quot;815&quot; src=&quot;https://www.youtube-nocookie.com/embed/pqGsIdFxTs4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;More details and download: &lt;a href=&quot;https://blog.itprocloud.de/Windows-Virtual-Desktop-Admin&quot;&gt;WVDAdmin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And get additional information from &lt;a href=&quot;https://www.linkedin.com/pulse/next-big-innovation-windows-virtual-desktop-here-freek-berson/&quot;&gt;Freek Berson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Official announcement: &lt;a href=&quot;https://www.microsoft.com/en-us/microsoft-365/blog/2020/04/30/enable-remote-work-faster-new-windows-virtual-desktop-capabilities/&quot;&gt;https://www.microsoft.com/en-us/microsoft-365/blog/2020/04/30/enable-remote-work-faster-new-windows-virtual-desktop-capabilities/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 04 May 2020 00:00:00 +0200</pubDate>
        <link>/Windows-Virtual-Desktop-Migrate-from-Fall-to-Spring/</link>
        <guid isPermaLink="true">/Windows-Virtual-Desktop-Migrate-from-Fall-to-Spring/</guid>
        
        
        <category>Windows Virtual Desktop</category>
        
      </item>
    
      <item>
        <title>Windows Virtual Desktop - Spring Release / Spring Update with WVDAdmin</title>
        <description>&lt;p&gt;Windows Virtual Desktop - Spring Release / Spring Update goes public today. I’m tremendously happy about that while this is the next big step that we have eagerly awaited.&lt;/p&gt;
&lt;p&gt;The spring release gives us some feature and changes that make it even easier to deploy apps and desktops to users:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add groups instead of users to desktops and apps&lt;/li&gt;
&lt;li&gt;Full integration of the administration of WVD in the Azure Portal&lt;/li&gt;
&lt;li&gt;Using a native ARM deployment instead of the WVD tenant API&lt;/li&gt;
&lt;li&gt;Linking app groups and desktops into workspaces&lt;/li&gt;
&lt;li&gt;and a lot of more things&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even the administration of WVD was missing before. This was one reason to build WVDAdmin. I was often asked in the past if WVDAdmin will be unnecessary after the spring release of WVD. My answer: Sure, for the administration, WVDAdmin will not be that important anymore, but some features still add value. That’s why I decided months ago to develop WVDAdmin further and also prepare it for the “Spring Release”. So I am proud to announce that WVDAdmin is ready for the Spring Release starting with the already available version 1.5.&lt;/p&gt;
&lt;p&gt;To enable the Spring Release feature set a registry key (the current version will have this enabled by default):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HKCU\Software\ITProCloud\WVDAdmin

(Reg_DWord) &amp;quot;FeatureSet&amp;quot; = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/WVDAdmin/SpringReleaseRegistry.png&quot; alt=&quot;AADBrowser&quot; /&gt;&lt;/p&gt;
&lt;p&gt;First, register the new service provide Microsoft.DesktopVirtualization on your Azure subscription (one-time process). You must be owner of this subscription to do this. Go to your subscription -&amp;gt; Resource providers -&amp;gt;  search for “Microsoft.DesktopVirtualization” and click register:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/WVDAdmin/ResourceProvider.png&quot; alt=&quot;AADBrowser&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If you restart WVDAdmin you will see the new note “WVD V2” which displays your resources in the Spring Release. Please make sure that your service principal has the right permission to create and administrate your resources (the sp needs owner permission to the resource group containing your host pool, app groups, … to assign users and groups).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/WVDAdmin/SpringReleaseGui.png&quot; alt=&quot;AADBrowser&quot; /&gt;&lt;/p&gt;
&lt;p&gt;But what can you do with WVDAdmin compared to the portal integration? You can (e.g.):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Administrate all resources with a Windows GUI&lt;/li&gt;
&lt;li&gt;Create “golden images” from template/master VMs&lt;/li&gt;
&lt;li&gt;Rollout several session hosts into differents host pools (in both WVD releases)&lt;/li&gt;
&lt;li&gt;Re-use you created WVDAdmin images without any change&lt;/li&gt;
&lt;li&gt;Higher flexibility rolling out new session hosts in different ways (you can use different VMSizes and images in one host pool)&lt;/li&gt;
&lt;li&gt;Easy to use user administration to send messages, logoff, disconnect or shadowing users over the full environment (filterable)&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From an architectural perspective, the “Spring Update” is really close to the previews release. But there are a few differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WVD tenant and tenant groups are no longer used&lt;/li&gt;
&lt;li&gt;“Workspaces” summarize multiple apps and desktop groups. These apps and desktops are shown in the client grouped by workspaces&lt;/li&gt;
&lt;li&gt;All resources like host pools, app groups are ARM resources in the Azure portal.&lt;/li&gt;
&lt;li&gt;App groups must be in the same region as the host pools&lt;/li&gt;
&lt;li&gt;A Workspace can group apps and desktop groups in the same region&lt;/li&gt;
&lt;li&gt;The regions of the session hosts are completely independent of the regions of the host pools (which is great)&lt;/li&gt;
&lt;li&gt;Today you have only a few regions to roll out host pools and workspaces (which is not so important because you can rollout the   session hosts in any region)&lt;/li&gt;
&lt;li&gt;And you can assign groups to apps and desktops&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/WVDAdmin/SpringReleaseVSWVD.png&quot; alt=&quot;AADBrowser&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Check out my video rolling out session hosts from an existing WVD image into the spring update (sorry for the bad sound - I will change this later):&lt;/p&gt;
&lt;iframe width=&quot;800&quot; height=&quot;815&quot; src=&quot;https://www.youtube-nocookie.com/embed/Nb97VBiNQLI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;More details and download: &lt;a href=&quot;https://blog.itprocloud.de/Windows-Virtual-Desktop-Admin&quot;&gt;WVDAdmin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And get additional information from &lt;a href=&quot;https://www.linkedin.com/pulse/next-big-innovation-windows-virtual-desktop-here-freek-berson/&quot;&gt;Freek Berson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Official announcement: &lt;a href=&quot;https://www.microsoft.com/en-us/microsoft-365/blog/2020/04/30/enable-remote-work-faster-new-windows-virtual-desktop-capabilities/&quot;&gt;https://www.microsoft.com/en-us/microsoft-365/blog/2020/04/30/enable-remote-work-faster-new-windows-virtual-desktop-capabilities/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Apr 2020 00:00:00 +0200</pubDate>
        <link>/Windows-Virtual-Desktop-Spring-Update,-Spring-Release/</link>
        <guid isPermaLink="true">/Windows-Virtual-Desktop-Spring-Update,-Spring-Release/</guid>
        
        
        <category>Windows Virtual Desktop</category>
        
      </item>
    
  </channel>
</rss>
